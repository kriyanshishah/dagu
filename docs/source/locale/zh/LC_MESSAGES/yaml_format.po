# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Dagu Developers
# This file is distributed under the same license as the DAGU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DAGU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-09 03:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/yaml_format.rst:4 44d1b3af82184413a2d82c651158bbd9
msgid "Workflow Language (YAML)"
msgstr "工作流语言 (YAML)"

#: ../../source/yaml_format.rst:10 69a26199290a451c8e5d940d76b58b12
msgid "Basics"
msgstr "基础"

#: ../../source/yaml_format.rst:13 faf2aa64ce5046e79b7392ff335e415a
msgid "Minimal Example"
msgstr "最小示例"

#: ../../source/yaml_format.rst:15 a956175e68274c40885fcad9bc7194e5
msgid "The minimal example of a DAG file is as follows:"
msgstr "DAG 文件的最小示例如下:"

#: ../../source/yaml_format.rst:30 0e57ab99567643cba8016d3e426c261d
msgid "Working Directory"
msgstr "工作目录"

#: ../../source/yaml_format.rst:32 fb2bed9481d948a682233241b5981526
msgid ""
"You can specify the working directory for each step using the ``dir`` "
"field."
msgstr ""
"你可以使用 ``dir`` 字段为每个步骤指定工作目录。"

#: ../../source/yaml_format.rst:42 f25b59de55714c1baabdf538f6771bb4
msgid "Code Snippet"
msgstr "代码片段"

#: ../../source/yaml_format.rst:44 cf855d6ff7b14f2a901f03d43fee7155
msgid ""
"``script`` field provides a way to run arbitrary snippets of code in any "
"language."
msgstr ""
"``script`` 字段提供了一种以任意语言运行代码片段的方式。"

#: ../../source/yaml_format.rst:62 b7f38b1a765144ff9cb6f97e3946e7c7
msgid "Environment Variables"
msgstr "环境变量"

#: ../../source/yaml_format.rst:64 0c553dd0779648abb84cb867628c0b23
msgid ""
"You can define environment variables using the ``env`` field. The "
"environment variables can be accessed by the DAG and its steps."
msgstr ""
"你可以使用 ``env`` 字段定义环境变量。DAG 及其步骤可以访问这些环境变量。"

#: ../../source/yaml_format.rst:78 f2fe24e3d2f14b239f7cccdce83c2ca4
msgid "Parameters"
msgstr "参数"

#: ../../source/yaml_format.rst:80 bff3a981f9a242848e11bbd133e0ced2
msgid ""
"You can pass parameters to the DAG and its steps using the ``params`` "
"field. The parameters can be accessed by the steps using ``$1``, ``$2``, "
"and so on."
msgstr ""
"你可以使用 ``params`` 字段将参数传递给 DAG 及其步骤。步骤可以使用 ``$1``、``$2`` 等访问这些参数。"

#: ../../source/yaml_format.rst:90 196a96090039472db1c4e08c2afbcd16
msgid "Named Parameters"
msgstr "命名参数"

#: ../../source/yaml_format.rst:92 d421099654ea4ae59bb2157eb6f005e7
msgid ""
"You can also use named parameters in the ``params`` field. The named "
"parameters can be accessed by the steps using ``${FOO}``, ``${BAR}``, and"
" so on."
msgstr ""
"你还可以在 ``params`` 字段中使用命名参数。步骤可以使用 ``${FOO}``、``${BAR}`` 等访问这些命名参数。"

#: ../../source/yaml_format.rst:102 641179f817644d3782d6dba02d159e73
msgid "Conditional Logic"
msgstr "条件逻辑"

#: ../../source/yaml_format.rst:104 552da3208982422c8219b25f2833209d
msgid ""
"Sometimes you have parts of a DAG that you only want to run under certain"
" conditions. You can use the ``preconditions`` field to add conditional "
"branches to your DAG."
msgstr ""
"有时你只想在特定条件下运行 DAG 的某些部分。你可以使用 ``preconditions`` 字段向 DAG 添加条件分支。"

#: ../../source/yaml_format.rst:106 f87c21eec565470d8b7cf2e3c3e7a12a
msgid "For example, the task below only runs on the first date of each month."
msgstr "例如,下面的任务仅在每个月的第一天运行。"

#: ../../source/yaml_format.rst:117 11871abc5cfc4bf785d82bd6b29695c7
msgid ""
"If you want the DAG to continue to the next step regardless of the step's"
" conditional check result, you can use the ``continueOn`` field:"
msgstr ""
"如果你希望 DAG 继续执行下一步,而不管当前步骤的条件检查结果如何,你可以使用 ``continueOn`` 字段:"

#: ../../source/yaml_format.rst:131 90d4c4ca7c864572be081719e7414c8a
msgid "Capture Output"
msgstr "捕获输出"

#: ../../source/yaml_format.rst:133 22133ba5c0a74cb8a79de0da8e783389
msgid ""
"The ``output`` field can be used to set an environment variable with "
"standard output. Leading and trailing space will be trimmed "
"automatically. The environment variables can be used in subsequent steps."
msgstr ""
"``output`` 字段可用于使用标准输出设置环境变量。前导和尾随空格将被自动修剪。"
"这些环境变量可在后续步骤中使用。"

#: ../../source/yaml_format.rst:143 e05250deb70b4096bec885e11ab7894c
msgid "Redirect Standard Output and Error"
msgstr "重定向标准输出和错误"

#: ../../source/yaml_format.rst:145 bc34ab2b71a24c93af7da2fd916753f4
msgid "The `stdout` field can be used to write standard output to a file."
msgstr "可以使用 `stdout` 字段将标准输出写入文件。"

#: ../../source/yaml_format.rst:154 08ed428d9ff64038b808a10ba0dfd545
msgid ""
"The `stderr` field allows to redirect stderr to other file without "
"writing to the normal log file."
msgstr ""
"`stderr` 字段允许将标准错误重定向到其他文件,而不会写入正常的日志文件。"

#: ../../source/yaml_format.rst:165 b046e40135f440a5b716d3e1dd003765
msgid "Schedule"
msgstr "调度"

#: ../../source/yaml_format.rst:167 a40831725a5545c4a5da440e7a22d715
msgid "You can use the `schedule` field to schedule a DAG with Cron expression."
msgstr "你可以使用 `schedule` 字段通过 Cron 表达式调度 DAG。"

#: ../../source/yaml_format.rst:176 b80eb7c2a7184c99abc96a7d4370f709
msgid "See :ref:`scheduler configuration` for more details."
msgstr "有关更多详细信息,请参阅 :ref:`调度器配置`。"

#: ../../source/yaml_format.rst:181 e933d37fef034708b07669837ad05ec5
msgid "Docker Image"
msgstr "Docker 镜像"

#: ../../source/yaml_format.rst:184 5d5a6e1d48e04a44aa6ae5b6241a03ca
msgid "Execute an Image"
msgstr "执行镜像"

#: ../../source/yaml_format.rst:186 b59461d7ec2742828e19a32277b27a40
msgid "*Note: It requires Docker daemon running on the host.*"
msgstr "*注意:它需要在主机上运行 Docker 守护进程。*"

#: ../../source/yaml_format.rst:188 f73d1ca175574f03aedb2ab93a6bed19
msgid ""
"The `docker` executor allows us to run Docker containers instead of bare "
"commands. This can be useful for running commands in isolated "
"environments or for reproducibility purposes."
msgstr ""
"`docker` 执行器允许我们运行 Docker 容器而不是裸命令。这对于在隔离环境中运行命令或用于可复现性目的很有用。"

#: ../../source/yaml_format.rst:190 75545a9171214021abb772cbfe77376c
msgid ""
"In the example below, it pulls and runs `Deno's docker image "
"<https://hub.docker.com/r/denoland/deno>`_ and prints 'Hello World'."
msgstr ""
"在下面的示例中,它拉取并运行 `Deno 的 Docker 镜像 <https://hub.docker.com/r/denoland/deno>`_ 并打印 'Hello World'。"

#: ../../source/yaml_format.rst:203 8b29301bab024db0af8b3b345256fac4
msgid "Example Log output:"
msgstr "示例日志输出:"

#: ../../source/yaml_format.rst:208 5dbe65446f654b5a9008809065c63f28
msgid ""
"You can config the Docker container (e.g., `volumes`, `env`, etc) by "
"passing more detailed options."
msgstr ""
"你可以通过传递更详细的选项来配置 Docker 容器(例如 `volumes`、`env` 等)。"

#: ../../source/yaml_format.rst:210 7aacbee987df402fb26998fa82fcc314
msgid "For example:"
msgstr "例如:"

#: ../../source/yaml_format.rst:229 bbe73bbf18ae433884926179f4d9af46
msgid "See the Docker's API documentation for all available options."
msgstr "有关所有可用选项,请参阅 Docker 的 API 文档。"

#: ../../source/yaml_format.rst:231 bf96b1832cd94b2a88e39f75a0f441bb
msgid ""
"For `container`, see `ContainerConfig "
"<https://pkg.go.dev/github.com/docker/docker/api/types/container#Config>`_."
msgstr ""
"对于 `container`,请参阅 `ContainerConfig "
"<https://pkg.go.dev/github.com/docker/docker/api/types/container#Config>`_。"

#: ../../source/yaml_format.rst:232 3bb593ce434b4341aed28be1f2d2e7fe
msgid ""
"For `host`, see `HostConfig "
"<https://pkg.go.dev/github.com/docker/docker/api/types/container#HostConfig>`_."
msgstr ""
"对于 `host`,请参阅 `HostConfig "
"<https://pkg.go.dev/github.com/docker/docker/api/types/container#HostConfig>`_。"

#: ../../source/yaml_format.rst:236 c19328932da14e8a84a17adf1e13efd8
msgid "Use Host's Docker Environment"
msgstr "使用主机的 Docker 环境"

#: ../../source/yaml_format.rst:238 496dc89d6d2c4d7bb11f39d0a156717e
msgid "If you are running `dagu` using a container, you need the setup below."
msgstr "如果你使用容器运行 `dagu`,则需要进行以下设置。"

#: ../../source/yaml_format.rst:240 89b73515f28940ee8b74bd4986e9d5f6
msgid "Run a `socat` container with the command below."
msgstr "使用以下命令运行 `socat` 容器。"

#: ../../source/yaml_format.rst:246 d937b263562249ec9193eaedf5738cb1
msgid "Then you can set the `DOCKER_HOST` environment as follows."
msgstr "然后你可以按如下方式设置 `DOCKER_HOST` 环境。"

#: ../../source/yaml_format.rst:261 491c9e0efc84437c84a9cd988f996474
msgid ""
"For more details, see `this page <https://forums.docker.com/t/remote-api-"
"with-docker-for-mac-beta/15639/2>`_."
msgstr ""
"有关更多详细信息,请参阅 `此页面 <https://forums.docker.com/t/remote-api-"
"with-docker-for-mac-beta/15639/2>`_。"

#: ../../source/yaml_format.rst:264 67057315dab149659de40f2a90a33552
msgid "Advanced"
msgstr "高级"

#: ../../source/yaml_format.rst:267 e8f7ff1a6ad844098604a0f7644feb0a
msgid "Making HTTP Requests"
msgstr "发出 HTTP 请求"

#: ../../source/yaml_format.rst:269 df5b6e3480cd46a39222d59f14b56ac8
msgid ""
"The `http` executor allows us to make an arbitrary HTTP request. This can"
" be useful for interacting with web services or APIs."
msgstr ""
"`http` 执行器允许我们发出任意 HTTP 请求。这对于与 Web 服务或 API 交互很有用。"

#: ../../source/yaml_format.rst:288 bb99f59ff35e401abf0ae3e338edc9b3
msgid "Sending Email"
msgstr "发送电子邮件"

#: ../../source/yaml_format.rst:290 a2885f409f5a4900a5e41b7666de9ebd
msgid ""
"The `mail` executor can be used to send email. This can be useful for "
"sending notifications or alerts."
msgstr ""
"`mail` 执行器可用于发送电子邮件。这对于发送通知或警报很有用。"

#: ../../source/yaml_format.rst:292 ../../source/yaml_format.rst:486
#: ../../source/yaml_format.rst:541 0795fd986aa842d7933a2b9dc3bd627c
#: 3f5428362b5f42718b9feeb9209c90d4 b765aa1528b249a48669da682da6e950
msgid "Example:"
msgstr "示例:"

#: ../../source/yaml_format.rst:327 75bb3a7b42664819ad56420d10a16620
msgid "Command Execution over SSH"
msgstr "通过 SSH 执行命令"

#: ../../source/yaml_format.rst:329 d46f0ad37405420bbef642b795fa37d8
msgid "The `ssh` executor allows us to execute commands on remote hosts over SSH."
msgstr "`ssh` 执行器允许我们通过 SSH 在远程主机上执行命令。"

#: ../../source/yaml_format.rst:345 2101930cceb64ef195a9d59e827bc28e
msgid "Command Substitution"
msgstr "命令替换"

#: ../../source/yaml_format.rst:347 0b8612268a1b4f658f7c21f91fb54f5e
msgid ""
"You can use command substitution in field values. I.e., a string enclosed"
" in backquotes (`) is evaluated as a command and replaced with the result"
" of standard output."
msgstr ""
"你可以在字段值中使用命令替换。即,用反引号(`)括起来的字符串会被作为命令进行求值,并被标准输出的结果所替换。"

#: ../../source/yaml_format.rst:358 59ffbb5e1fc44ffe8b6384dc001bbe55
msgid "Lifecycle Hooks"
msgstr "生命周期钩子"

#: ../../source/yaml_format.rst:360 1deb867c5b404016987105fda23c8baa
msgid ""
"It is often desirable to take action when a specific event happens, for "
"example, when a DAG fails. To achieve this, you can use `handlerOn` "
"fields."
msgstr ""
"当特定事件发生时(例如,DAG 失败时),通常需要采取行动。为此,你可以使用 `handlerOn` 字段。"

#: ../../source/yaml_format.rst:374 ffe9ef837208408eb9736e2d5c670a94
msgid "Repeat a Step"
msgstr "重复步骤"

#: ../../source/yaml_format.rst:376 c78a61e1d0ab48edb55e8128f17b3d17
msgid ""
"If you want a task to repeat execution at regular intervals, you can use "
"the `repeatPolicy` field. If you want to stop the repeating task, you can"
" use the `stop` command to gracefully stop the task."
msgstr ""
"如果你希望任务以固定时间间隔重复执行,可以使用 `repeatPolicy` 字段。"
"如果你想停止重复任务,可以使用 `stop` 命令优雅地停止任务。"

#: ../../source/yaml_format.rst:388 af35b1c4aa8149688ff71143ba63e27a
msgid "User Defined Functions"
msgstr "用户定义函数"

#: ../../source/yaml_format.rst:390 889922e2981149dcb7d746904442d8eb
msgid ""
"You can define functions in the DAG file and call them in steps. The "
"``params`` field is required for functions. The ``args`` field is used to"
" pass arguments to functions. The arguments can be command substitutions "
"or environment variables."
msgstr ""
"你可以在 DAG 文件中定义函数,并在步骤中调用它们。函数需要 ``params`` 字段。"
"``args`` 字段用于将参数传递给函数。参数可以是命令替换或环境变量。"

#: ../../source/yaml_format.rst:408 787d166aceab489b8273937b0ab615d2
msgid "JSON Processing"
msgstr "JSON 处理"

#: ../../source/yaml_format.rst:411 ec5ce566739847f0803f5bc397a2bd91
msgid "Executing jq Command"
msgstr "执行 jq 命令"

#: ../../source/yaml_format.rst:413 05a7bb3a23fa4462b58a3bcf26905f87
msgid ""
"The `jq` executor can be used to transform, query, and format JSON. This "
"can be useful for working with JSON data in pipelines or for data "
"processing."
msgstr ""
"`jq` 执行器可用于转换、查询和格式化 JSON。这对于在管道中处理 JSON 数据或进行数据处理很有用。"

#: ../../source/yaml_format.rst:424 ../../source/yaml_format.rst:443
#: 3a90ed4ade184a20820300ca14272ea2 bbbb4b30e20e4c5b8494f25f6a5f0166
msgid "**Output:**"
msgstr "**输出:**"

#: ../../source/yaml_format.rst:433 4786072f10e34f93b2a7ed0b52d0a5a8
msgid "Formatting JSON"
msgstr "格式化 JSON"

#: ../../source/yaml_format.rst:457 e4bbf635b1a54682832b33c0e5bac801
msgid "All Available Fields"
msgstr "所有可用字段"

#: ../../source/yaml_format.rst:460 af6d4ab4f7274869a65b2875c9757abe
msgid "DAG"
msgstr "DAG"

#: ../../source/yaml_format.rst:462 3779d060d30542e49d773c736ec2ef56
msgid ""
"This section provides a comprehensive list of available fields that can "
"be used to configure DAGs and their steps in detail. Each field serves a "
"specific purpose, enabling granular control over how the DAG runs. The "
"fields include:"
msgstr ""
"本节提供了可用于详细配置 DAG 及其步骤的所有可用字段的完整列表。"
"每个字段都有特定的用途,可以对 DAG 的运行方式进行精细控制。这些字段包括:"

#: ../../source/yaml_format.rst:464 9be6e4aabdf540348f9639a08eb7b328
msgid ""
"``name``: The name of the DAG, which is optional. The default name is the"
" name of the file."
msgstr ""
"``name``: DAG 的名称,是可选的。默认名称是文件名。"

#: ../../source/yaml_format.rst:465 59cbbf03991f4bc6885f1b08ea1ebf86
msgid "``description``: A brief description of the DAG."
msgstr "``description``: DAG 的简要描述。"

#: ../../source/yaml_format.rst:466 0d21fc8810644b0e8a2a9270af82d292
msgid "``schedule``: The execution schedule of the DAG in Cron expression format."
msgstr "``schedule``: 以 Cron 表达式格式表示的 DAG 执行计划。"

#: ../../source/yaml_format.rst:467 b69f282d094047f5bf608e0c79189a54
msgid "``group``: The group name to organize DAGs, which is optional."
msgstr "``group``: 用于组织 DAG 的组名,是可选的。"

#: ../../source/yaml_format.rst:468 c05dc4022e9d4bac9766c3aa9d973bf9
msgid ""
"``tags``: Free tags that can be used to categorize DAGs, separated by "
"commas."
msgstr ""
"``tags``: 可用于对 DAG 进行分类的自由标签,用逗号分隔。"

#: ../../source/yaml_format.rst:469 03fc7566d45541b8b616f84ab427116e
msgid ""
"``env``: Environment variables that can be accessed by the DAG and its "
"steps."
msgstr ""
"``env``: DAG 及其步骤可以访问的环境变量。"

#: ../../source/yaml_format.rst:470 0bb39c8f389848b08a48bc3d8638c509
msgid ""
"``logDir``: The directory where the standard output is written. The "
"default value is ``${DAGU_HOME}/logs/dags``."
msgstr ""
"``logDir``: 写入标准输出的目录。默认值为 ``${DAGU_HOME}/logs/dags``。"

#: ../../source/yaml_format.rst:471 84c63d4812854612a0005df5046aff86
msgid ""
"``restartWaitSec``: The number of seconds to wait after the DAG process "
"stops before restarting it."
msgstr ""
"``restartWaitSec``: DAG 进程停止后重新启动前等待的秒数。"

#: ../../source/yaml_format.rst:472 337cb812e0f042bdaff3fcde598a18e6
msgid ""
"``histRetentionDays``: The number of days to retain execution history "
"(not for log files)."
msgstr ""
"``histRetentionDays``: 保留执行历史记录的天数(不适用于日志文件)。"

#: ../../source/yaml_format.rst:473 f7d6eb1ab7b7483d8aedff04ea00e7c2
msgid "``delaySec``: The interval time in seconds between steps."
msgstr "``delaySec``: 步骤之间的间隔时间(以秒为单位)。"

#: ../../source/yaml_format.rst:474 742ed2cb7f384af2bbe836c77e44bd4f
msgid "``maxActiveRuns``: The maximum number of parallel running steps."
msgstr "``maxActiveRuns``: 并行运行的最大步骤数。"

#: ../../source/yaml_format.rst:475 88261082ba414351b75393664f594971
msgid ""
"``params``: The default parameters that can be referred to by ``$1``, "
"``$2``, and so on."
msgstr ""
"``params``: 可以通过 ``$1``、``$2`` 等引用的默认参数。"

#: ../../source/yaml_format.rst:476 2c279bac8b0f4b6a871c7f8d80aa6b25
msgid ""
"``preconditions``: The conditions that must be met before a DAG or step "
"can run."
msgstr ""
"``preconditions``: DAG 或步骤运行前必须满足的条件。"

#: ../../source/yaml_format.rst:477 fa94ab4486ad4972ae4dbde600665367
msgid ""
"``mailOn``: Whether to send an email notification when a DAG or step "
"fails or succeeds."
msgstr ""
"``mailOn``: 当 DAG 或步骤失败或成功时是否发送电子邮件通知。"

#: ../../source/yaml_format.rst:478 1ed372546460490e9800d54a7fe19175
msgid ""
"``MaxCleanUpTimeSec``: The maximum time to wait after sending a TERM "
"signal to running steps before killing them."
msgstr ""
"``MaxCleanUpTimeSec``: 在向正在运行的步骤发送 TERM 信号后,在强制终止它们之前等待的最长时间。"

#: ../../source/yaml_format.rst:479 40c0aee96d66476193109599d901ee14
msgid ""
"``handlerOn``: The command to execute when a DAG or step succeeds, fails,"
" cancels, or exits."
msgstr ""
"``handlerOn``: 当 DAG 或步骤成功、失败、取消或退出时要执行的命令。"

#: ../../source/yaml_format.rst:480 e0ef1b3266db4c8c97a04a4b08b74434
msgid "``steps``: A list of steps to execute in the DAG."
msgstr "``steps``: 要在 DAG 中执行的步骤列表。"

#: ../../source/yaml_format.rst:482 8993958642c54df8af8f8feb63a61306
msgid ""
"In addition, a global configuration file, ``$DAGU_HOME/config.yaml``, can"
" be used to gather common settings, such as ``logDir`` or ``env``."
msgstr ""
"此外,可以使用全局配置文件 ``$DAGU_HOME/config.yaml`` 来收集常见设置,例如 ``logDir`` 或 ``env``。"

#: ../../source/yaml_format.rst:484 bee44595f6004cc0b34f4e2bbfdb1217
msgid ""
"Note: If ``DAGU_HOME`` environment variable is not set, the default path "
"is ``$HOME/.dagu/config.yaml``."
msgstr ""
"注意:如果未设置 ``DAGU_HOME`` 环境变量,默认路径为 ``$HOME/.dagu/config.yaml``。"

#: ../../source/yaml_format.rst:522 f7dc490d92784e0695de6deee2b84465
msgid "Step"
msgstr "步骤"

#: ../../source/yaml_format.rst:524 a7449045ac364e7bb53762914e2cc41b
msgid "Each step can have its own set of configurations, including:"
msgstr "每个步骤都可以有自己的一组配置,包括:"

#: ../../source/yaml_format.rst:526 37699dd776fc462b91c10bcc715d6db2
msgid "``name``: The name of the step."
msgstr "``name``: 步骤的名称。"

#: ../../source/yaml_format.rst:527 37d95419feb74bba9b44d114abfca451
msgid "``description``: A brief description of the step."
msgstr "``description``: 步骤的简要描述。"

#: ../../source/yaml_format.rst:528 11437925cae84ae7959bf55f19475b37
msgid "``dir``: The working directory for the step."
msgstr "``dir``: 步骤的工作目录。"

#: ../../source/yaml_format.rst:529 227d1eff198e403c99ee0997a176805f
msgid "``command``: The command and parameters to execute."
msgstr "``command``: 要执行的命令和参数。"

#: ../../source/yaml_format.rst:530 f3d83b2f56dc4b2aa20a169155b367e1
msgid "``stdout``: The file to which the standard output is written."
msgstr "``stdout``: 写入标准输出的文件。"

#: ../../source/yaml_format.rst:531 6c222e84320c4210bc451e5d0e957bec
msgid "``output``: The variable to which the result is written."
msgstr "``output``: 写入结果的变量。"

#: ../../source/yaml_format.rst:532 ec0691516ce446b3b9577ced7a2db83a
msgid "``script``: The script to execute."
msgstr "``script``: 要执行的脚本。"

#: ../../source/yaml_format.rst:533 5b10bc1307ed422986a36e157502c6e0
msgid ""
"``signalOnStop``: The signal name (e.g., ``SIGINT``) to be sent when the "
"process is stopped."
msgstr ""
"``signalOnStop``: 进程停止时要发送的信号名称(例如 ``SIGINT``)。"

#: ../../source/yaml_format.rst:534 5850ba2715204452b85bb4759fe9663a
msgid ""
"``mailOn``: Whether to send an email notification when the step fails or "
"succeeds."
msgstr ""
"``mailOn``: 当步骤失败或成功时是否发送电子邮件通知。"

#: ../../source/yaml_format.rst:535 b6a759f94dcf4bf8b9f2a11d540af7eb
msgid ""
"``continueOn``: Whether to continue to the next step, regardless of "
"whether the step failed or not or the preconditions are met or not."
msgstr ""
"``continueOn``: 无论步骤是否失败或是否满足先决条件,是否继续执行下一步。"

#: ../../source/yaml_format.rst:536 918b6469840b41a5b879041300e207cd
msgid "``retryPolicy``: The retry policy for the step."
msgstr "``retryPolicy``: 步骤的重试策略。"

#: ../../source/yaml_format.rst:537 8fb97b6a88b549e793b3dd716ea6d794
msgid "``repeatPolicy``: The repeat policy for the step."
msgstr "``repeatPolicy``: 步骤的重复策略。"

#: ../../source/yaml_format.rst:538 a9a05cca86014010a19a99279676223c
msgid "``preconditions``: The conditions that must be met before a step can run."
msgstr "``preconditions``: 步骤运行前必须满足的条件。"

#: ../../source/yaml_format.rst:539 a582f742e61843ea8479f601b2231d9e
msgid "``depends``: The step depends on the other step."
msgstr "``depends``: 步骤依赖于其他步骤。"
